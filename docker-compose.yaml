version: "3"

services:

  app:
    image: app_image
    build:
      context: src
    entrypoint:
      - ./bash/start_app.sh
    container_name: app
    volumes:
      - static_volume:/opt/admin/static
      - media_volume:/opt/admin/media
      - ./src:/opt/admin
    env_file:
      - .env
    restart: always
    environment:
      PG_ADMIN_BILLING_DB_HOST: ${PG_ADMIN_BILLING_DB_HOST:-postgres}
      PG_ADMIN_BILLING_DB_PORT: ${PG_ADMIN_BILLING_DB_PORT:-5432}
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - 8000:8000

  auth_service:
    build: auth_service/src
    restart: always
    env_file:
      - .env
    environment:
      - AUTH_JAEGER_HOST=jaeger
      - AUTH_JAEGER_PORT=6831
      - AUTH_POSTGRES_HOST=postgres
      - AUTH_POSTGRES_PORT=5432
      - AUTH_REDIS_HOST=redis
      - AUTH_REDIS_PORT=6379
      - AUTH_RSA_PRIVATE_PATH=/run/secrets/rsa_priv
      - AUTH_RSA_PUBLIC_PATH=/run/secrets/rsa_pub
      - AUTH_ACCOUNTS_FILE_PATH=/run/secrets/service_accounts
      - AUTH_DEBUG=True
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    healthcheck:
      test: curl --fail http://127.0.0.1:8000/health/ || exit 1
      interval: 5s
      timeout: 30s
      retries: 5
    volumes:
      - ./auth_service/src:/home/app
    secrets:
      - rsa_pub
      - rsa_priv
      - service_accounts
    ports:
      - 8001:8000

  postgres:
    image: postgres:alpine3.19
    volumes:
      - db_volume:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${PG_ADMIN_BILLING_USER}
      POSTGRES_DB: ${PG_ADMIN_BILLING_PASSWORD}
      POSTGRES_PASSWORD: ${PG_ADMIN_BILLING_DB_NAME}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-d", "postgres" ]
      interval: 10s
      timeout: 60s
      retries: 5
      start_period: 5s
    ports:
      - 5432:5432

  redis:
    image: redis:latest
    restart: always
    healthcheck:
      test: redis-cli ping || exit 1
      interval: 10s
      timeout: 30s
      retries: 10
    ports:
      - 6379:6379

  rabbit:
    build:
      context: "./rabbitmq"
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
    ports:
      - "5672:5672"
      - "15672:15672"

  worker:
    image: app_image
    container_name: worker
    entrypoint:
      - ./bash/start_celery.sh
    volumes:
      - worker_data:/data
    restart: always
    env_file:
      - .env
    environment:
      PG_ADMIN_BILLING_DB_HOST: ${PG_ADMIN_BILLING_DB_HOST:-postgres}
      PG_ADMIN_BILLING_DB_PORT: ${PG_ADMIN_BILLING_DB_PORT:-5432}
    depends_on:
      postgres:
        condition: service_healthy
      app:
        condition: service_started
      rabbit:
        condition: service_started
      redis:
        condition: service_started

  flower:
    image: app_image
    container_name: flower
    entrypoint:
      - ./bash/start_flower.sh
    volumes:
      - flower_data:/data
    restart: always
    env_file:
      - .env
    depends_on:
      - worker
    ports:
      - "5555:5555"

volumes:
  db_volume:
  static_volume:
  media_volume:
  worker_data:
  flower_data:

secrets:
  rsa_pub:
    file: ./keys/rsa.pub
  rsa_priv:
    file: ./keys/rsa.private
  service_accounts:
    file: ./keys/services.json
